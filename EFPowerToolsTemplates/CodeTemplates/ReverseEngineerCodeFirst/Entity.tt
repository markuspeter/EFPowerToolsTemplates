<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public class <#= efHost.EntityType.Name #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= code.Escape(GetPropertyNameForNavigationProperty(navProperty)) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
#>
        <#= Accessibility.ForProperty(property) #> <#= code.Escape(property.TypeUsage) #> <#= code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(GetPropertyNameForNavigationProperty(navProperty)) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(GetPropertyNameForNavigationProperty(navProperty)) #> { get; set; }
<#
        }
    }
#>
    }
}
<#+
public string GetPropertyNameForNavigationProperty(NavigationProperty navigationProperty)
{
    var propertyName = "";
    if(navigationProperty.ToEndMember.RelationshipMultiplicity  == RelationshipMultiplicity.Many
        && navigationProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
    {
        propertyName = navigationProperty.RelationshipType.Name;
    }
    else
    {
        var association = (AssociationType)navigationProperty.RelationshipType;
        if(association.ReferentialConstraints.Single().ToProperties.Count == 1)
        {
            propertyName = association.ReferentialConstraints.Single().ToProperties.Single().Name;
        }
        else
        {
            propertyName = string.Join("", association.ReferentialConstraints.Single().ToProperties.Select(p => p.Name));
        }
    }
    if (navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
    {
        propertyName = propertyName + navigationProperty.ToEndMember.Name;
    }
    else
    {
        propertyName = propertyName + navigationProperty.ToEndMember.GetEntityType().Name;
    }
    return propertyName;
}
#>